<script>
    jQuery(document).ready(function() {
        jQuery('#Submit').click(function(e){
            if(!confirm('Once a review has been submitted, you cannot edit it again')){
                e.preventDefault();
                e.stopPropagation();
                return;
            }else{
                jQuery('#isSubmit').val('Yes');
            }
        });
        jQuery('#metareview').click(function(event){
            event.preventDefault();
            event.stopPropagation();
            var URL='http://localhost:3001/metareviewgenerator/';

            var data=({reviews:readComments()});

            jQuery.ajax({
                type: 'POST',
                url: URL+'content',
                data: data
                //contentType: 'application/x-www-form-urlencoded'
            }).fail( function (jqXHR, status){
                jQuery('#lblMetareviewContent').html(status);
            }).success(function (data){
                consumeMetareviewContent(data);
            });

            jQuery.ajax({
                type: 'POST',
                url: URL+'volume',
                data: data
                //contentType: 'application/x-www-form-urlencoded'
            }).fail( function (jqXHR, status){
                jQuery('#lblMetareviewVolume').html(status);
            }).success(function (data){
                consumeMetareviewVolume(data);
            });

            return;
        });
        function readComments(){
            var counter=0;
            var feedbackComment='';
            while(document.getElementById('responses_'+counter+'_comments')!=null)
            {
                feedbackComment +=jQuery('#responses_'+counter+'_comments').val();
                counter++;
            }
            return feedbackComment;
        }
        function consumeMetareviewVolume(data){
            var volume=data['volume'];
            var volumeString='Volume of the review is <b>'+volume+'</b>.';
            if(volume<50)
                volumeString+=' You should provide more feedback.';

            jQuery('#lblMetareviewVolume').html(volumeString);
        }
        function consumeMetareviewContent(data){


            var content_summative=data['content_summative']
            var content_problem=data['content_problem']
            var content_advisory=data['content_advisory']



            if(content_summative>0)
                var summativeString=' This review <b>contains</b> summative feedback.';
            else
                var summativeString='You can summarize the work.';

            if(content_problem>0)
                var problemString=' One or more problems are identified in this review.';
            else
                var problemString=' This review <b>does not detect</b> any problem with the artifact.';

            if(content_advisory>0)
                var advisoryString=' This review <b> contains advisory</b> for the author.';
            else
                var advisoryString=' You can provide advisory for the author.';

            resultString =summativeString+'<br />'+problemString+'<br />'+advisoryString;

            jQuery('#lblMetareviewContent').html(resultString);
        }

    });
</script>
<h1><%= @header %> <%= @title %> for <%= @map.assignment.name %></h1>

<% if !@map.contributor.nil? && !@map.instance_of?(FeedbackResponseMap) %>
    <% if @map.assignment.team_assignment? %>
        <% team_member = TeamsUser.find_by_team_id(@map.contributor).user_id%>
        <% topic_id = SignedUpTeam.topic_id(@map.assignment.id, team_member) %>
    <% else %>
        <% participant = Participant.find(TeamsUser.find_by_team_id(@map.contributor).user_id) %>
        <% topic_id = SignedUpTeam.where(participant.parent_id, participant.user_id) %>
    <% end %>
    <% if !topic_id.nil? %>
        <h2>You are reviewing <%= SignUpTopic.find(topic_id).topic_name %></h2>
    <% end %>

    <%if @assignment.has_teams?%>
        <% topic_id = SignedUpTeam.topic_id(@participant.parent_id, @participant.user_id) %>
        <%= render :partial => 'submitted_content/main', :locals => {:reviewee_participant => @contributor.participants.first,:participant => @contributor.participants.first, :stage => @assignment.get_current_stage(topic_id)} %>
    <%else%>
        <% topic_id = SignedUpTeam.topic_id(@participant.parent_id, @participant.user_id) %>
        <%= render :partial => 'submitted_content/main', :locals => {:participant => @contributor, :stage => @assignment.get_current_stage(topic_id)} %>
    <%end%>
    <hr/>
<% end %>
<!-- display all versions available -->
<% @responses_versions = Array.new %>
<% @responses_versions = @map.get_all_versions() %>

<% if @responses_versions.empty? %>
    <I>No previous review was performed.</I><br/><hr/><br/>
<% else %>
    <%= render :partial => 'review', :locals => {:versions => @responses_versions} %>
<% end %>
<h2>Directions for the reviewer</h2>

<%= form_tag :action => @next_action, :id => @modified_object do %>
    <% if @next_action.eql?'update' %>
        <input name="_method" type="hidden" value="put" />
    <%end%>
    <% i = 0 %>
    <%@questions.each do |question| %>
        <% answer = Answer.where(question_id: question.id, response_id: @response.id).first if !@response.nil?%>
        <% if question.instance_of? Criterion%>
            <%= question.complete(i, answer, @questionnaire.min_question_score, @questionnaire.max_question_score, @dropdown_or_scale) %>
        <% elsif question.instance_of? Scale %>
            <%= question.complete(i, answer, @questionnaire.min_question_score, @questionnaire.max_question_score) %>
        <% elsif question.instance_of? UploadFile %>
            <!--One form had better not in another form-->
            <!--Zhewei: I move the Uploadfile question to the end of questionnaire. So multiple forms will not been overlapped.-->
        <% else %>
            <%= question.complete(i, answer) %>
        <% end %>
        <% i += 1%>
    <% end %>

    <p>
      <label for="review_comments">Additional Comments</label><BR/>
      <textarea cols="70" rows="1" id="review_comments" name="review[comments]" style="overflow:hidden;">
        <% if controller.action_name != 'new' and @response.additional_comment != nil %><%= @response.additional_comment.strip if !@response.nil?%>
        <% end %></textarea>
    </p>

    <%if @current_round%>
        <%= hidden_field_tag "review[round]", @current_round %>
    <%end%>
    <%= hidden_field_tag "review[questionnaire_id]", @questionnaire.id %>

    <br/>
    <%=  submit_tag "Evaluate Review Quality", :name=>"metareview", :id=>"metareview" %>
    <br />
    <label id="lblMetareviewVolume" name="lblMetareviewVolume"></label><br />
    <label id="lblMetareviewContent" name="lblMetareviewContent"></label>
    <br />
    <br>
    <%= submit_tag "Save "+@title, :name => "save" %>
    <!--#E1600 check title for selfreview to show submit button-->
    <% if @title && ((@title.eql? 'Review') || (@title.eql? 'Self Review')) %>
        <%= submit_tag "Submit "+@title, :name => "Submit", :id => "Submit" %>
        <img src="/assets/info.png" title='- SAVE will only store the peer-review as draft and the peer-review will not be displayed to the reviewee. After clicking SUBMIT, the peer-review will be displayed to reviewee, and you will not be able to update it any more.'>
    <% end %>
    <%= hidden_field_tag('return', @return) %>
    <%= hidden_field_tag  "isSubmit", :id=>"isSubmit" %>

<% end %>
<!--Check whether there is a UploadFile question.-->
<%@questions.each do |question| %>
    <% if question.instance_of? UploadFile %>
        <%= label_tag 'UploadFile', '↑↑↑↑↑↑↑Before you upload a file, you must click “Save Review” first. If you do not, you will lose all your work (everything you have typed into this review form)!↑↑↑↑↑↑↑', style: "color:red;"%>
        <!--params[:origin] means from where do the files upload-->
        <!--If the files uploaded from submitted_work (students hand in assignment), params[:origin] will be nil-->
        <!--If the files uploaded from peer review, params[:origin] will be 'review'-->
        <% if params[:action] == 'new' %>
            <% response_map_id = params[:id] %>
        <% elsif params[:action] == 'edit' %>
            <% response_map_id = Response.find(params[:id]).response_map.id %>
        <% end %>
        <%= render partial: 'submitted_content/submitted_files', locals: {participant: @participant, stage: @stage, origin: 'review', response_map_id: response_map_id} %>
    <% end %>
<% end %>
<%= @map.show_feedback(@response) %>
<a href="javascript:window.history.back()">Back</a>
