<script>
    var submitted_work = {};
    submitted_work.questions = [];
    var question;
    <%
        review = rscore[:assessments][0]
        Score.find_all_by_response_id(review.response_id).each {
               |reviewScore|
               question = Question.find_by_id(reviewScore.question_id)
    %>
    question = {};
    question.txt = '<%= question.txt %>'.trim();
    question.max_score = '<%= question.questionnaire.max_question_score.to_s %>'.trim();
    submitted_work.questions.push(question);
    <%
        }
    %>
    submitted_work.reviews = [];
    var review;
    <%
        for review in rscore[:assessments]
    %>
    review = {};
    review.updated_at = '<%= review.updated_at.strftime('%x') %><br/><%= review.updated_at.strftime('%X') %>';
    review.scores = [];
    review.comments = [];

    <%
            Score.find_all_by_response_id(review.response_id).each{ |reviewScore|
    %>
    review.scores.push('<%= reviewScore.score.to_s %>'.trim());
    review.comments.push('<%= reviewScore.comments %>'.trim());
    <%
            }
            feedback = FeedbackResponseMap.find_by_reviewed_object_id(review.id)
            if feedback
    %>
            review.feedback = '<%= link_to "view", :controller => "response", :action => "view", :id => feedback.id %> <%= link_to "edit", :controller => "response", :action => "edit", :id => feedback.id, :return => "feedback" %>'
            <% else %>
            review.feedback = '<%= link_to "new", :controller => "response", :action => "new_feedback", :id => review.id %>'
            <% end %>
    submitted_work.reviews.push(review);
    <%
        end
    %>
</script>

<br/><br/>

<table class="table round-border-table text-center table-striped" id="submitted-work-table">
  <thead>
  <tr style="background-color:#dddddd">
  <th style="text-align:left">Question</th>
  </thead>
  <tbody>

  </tbody>
</table>
<div id="divSubmittedWorkChart" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
<script>
    // Add questions to the table
    $('#submitted-work-table > tbody:last').append('<tr><td style="text-align:left"><b>Review date<b></td></tr>');
    for (var index = 0; index < submitted_work.questions.length; index++) {
        var q = submitted_work.questions[index];
        $('#submitted-work-table > tbody:last').append('<tr><td style="text-align:left">' + q.txt + '</td></tr>');
    }
    $('#submitted-work-table > tbody:last').append('<tr><td style="text-align:left"><b>Total Score</b></td></tr>');
    $('#submitted-work-table > tbody:last').append('<tr><td style="text-align:left"><b>Feedback for review</b></td></tr>');

    // Add reviews to the table
    for (var index = 0; index < submitted_work.reviews.length; index++) {
        var r = submitted_work.reviews[index];
        $('#submitted-work-table > thead').find('tr').each(function () {
            var trow = $(this);
            trow.append('<th>Review ' + (index + 1) + '</th>');
        });

        $($('#submitted-work-table > tbody > tr')[0]).append('<td>' + r.updated_at + '</td>');

        var obtained_total = 0;
        var max_total = 0;
        $('#submitted-work-table > tbody').find('tr').each(function () {
            var trow = $(this);
            if (trow.index() >= 1 && trow.index() < submitted_work.questions.length + 1) {
                var qid = trow.index() - 1;
                obtained_total += parseFloat(r.scores[qid]);
                max_total += parseFloat(submitted_work.questions[qid].max_score);
                trow.append('<td title=' + r.comments[qid] + '><b>' + r.scores[qid] + '</b> / <b>' + submitted_work.questions[qid].max_score + '</b></td>');
            }
        });
        var percentage = Math.round((obtained_total / max_total) * 100 * 100) / 100;
        $($('#submitted-work-table > tbody > tr')[submitted_work.questions.length + 1]).append('<td><b>' + percentage + '%</b></td>');
        $($('#submitted-work-table > tbody > tr')[submitted_work.questions.length + 2]).append('<td><b>' + r.feedback + '</b></td>');

    }

    $(function () {
        var questions = [], questionScores = [];
        questions.counter = 0;

        $(submitted_work.reviews[0].scores).each(function(){
            questionScores.push(parseInt(this));
        });

        $(submitted_work.questions).each(function(){
            questions.push(this.txt);
        });

        var masterChart = new Highcharts.Chart({
            chart: {
                type: 'bar',
                renderTo: 'divSubmittedWorkChart'
            },
            title: {
                text: 'Questions with Average Scores'
            },
            xAxis: {
                categories: questions,
                labels: {
                    align:'right',
                    formatter: function () {
                        questions.counter = questions.counter + 1;
                            return "Question " + questions.counter;
                    }
                }
            },
            yAxis: {
                min: 0,
                title: {
                    text: 'Average Score'
                }
            },
            legend: {
                backgroundColor: '#FFFFFF',
                reversed: true
            },
            series: [{
                name: 'Average Score',
                color:'#4572A7',
                data: questionScores
            }]
        });
    });

</script>